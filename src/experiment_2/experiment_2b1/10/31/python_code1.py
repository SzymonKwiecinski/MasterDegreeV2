import pulp
import json

data = {
    'demand': [15000, 30000, 25000, 40000, 27000],
    'num': [12, 10, 5],
    'minlevel': [850, 1250, 1500],
    'maxlevel': [2000, 1750, 4000],
    'runcost': [1000, 2600, 3000],
    'extracost': [2.0, 1.3, 3.0],
    'startcost': [2000, 1000, 500]
}

T = len(data['demand'])  # Number of time periods
K = len(data['num'])      # Number of generator types

# Create the problem variable
problem = pulp.LpProblem("Power_Generation_Optimization", pulp.LpMinimize)

# Decision variables
numon = pulp.LpVariable.dicts("numon", (range(K), range(T)), lowBound=0, upBound=None, cat='Integer')
power_generated = pulp.LpVariable.dicts("power_generated", (range(K), range(T)), lowBound=0, upBound=None, cat='Continuous')
start = pulp.LpVariable.dicts("start", (range(K), range(T)), cat='Binary')

# Objective function: minimize total cost
total_cost = pulp.lpSum(data['runcost'][k] * numon[k][t] +
                         data['startcost'][k] * start[k][t] +
                         data['extracost'][k] * (power_generated[k][t] - data['minlevel'][k]) * numon[k][t]
                         for k in range(K) for t in range(T) if power_generated[k][t] > data['minlevel'][k])

problem += total_cost

# Constraints
for t in range(T):
    # Total power generated must meet the demand at period t
    problem += pulp.lpSum(power_generated[k][t] for k in range(K)) == data['demand'][t]

for t in range(T):
    for k in range(K):
        # Power generated by k-th generator must be between min and max levels
        problem += power_generated[k][t] >= data['minlevel'][k] * numon[k][t]
        problem += power_generated[k][t] <= data['maxlevel'][k] * numon[k][t]
        
        # To generate power, the generator must be on
        problem += power_generated[k][t] <= data['maxlevel'][k] * start[k][t]
        problem += power_generated[k][t] >= data['minlevel'][k] * start[k][t]

        # Number of generators on cannot exceed available generators
        problem += numon[k][t] <= data['num'][k] * start[k][t]

# Solve the problem
problem.solve()

# Extract the results
numon_result = [[int(numon[k][t].varValue) for t in range(T)] for k in range(K)]

# Output the results
output = {
    "numon": numon_result
}

print(json.dumps(output, indent=4))
print(f' (Objective Value): <OBJ>{pulp.value(problem.objective)}</OBJ>')