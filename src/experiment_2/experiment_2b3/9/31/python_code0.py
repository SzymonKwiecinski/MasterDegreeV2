import pulp

# Input Data
data = {
    'demand': [15000, 30000, 25000, 40000, 27000],
    'num': [12, 10, 5],
    'minlevel': [850, 1250, 1500],
    'maxlevel': [2000, 1750, 4000],
    'runcost': [1000, 2600, 3000],
    'extracost': [2.0, 1.3, 3.0],
    'startcost': [2000, 1000, 500]
}

T = len(data['demand'])
K = len(data['num'])

# Decision Variables
prob = pulp.LpProblem("Power_Station_Operation", pulp.LpMinimize)

numon = pulp.LpVariable.dicts("numon", ((k, t) for k in range(K) for t in range(T)), cat='Integer', lowBound=0)
numstart = pulp.LpVariable.dicts("numstart", ((k, t) for k in range(K) for t in range(T)), cat='Integer', lowBound=0)
power_generated = pulp.LpVariable.dicts("power_generated", ((k, t) for k in range(K) for t in range(T)), lowBound=0)

# Objective Function
total_cost = pulp.lpSum(data['runcost'][k] * numon[k, t] +
                        data['startcost'][k] * numstart[k, t] +
                        data['extracost'][k] * (power_generated[k, t] - numon[k, t] * data['minlevel'][k])
                        for k in range(K) for t in range(T))

prob += total_cost

# Constraints
for t in range(T):
    # Demand must be met
    prob += pulp.lpSum(power_generated[k, t] for k in range(K)) >= data['demand'][t]

    for k in range(K):
        # Power generated by type k generators
        prob += power_generated[k, t] <= numon[k, t] * data['maxlevel'][k]
        prob += power_generated[k, t] >= numon[k, t] * data['minlevel'][k]

        # Number on cannot exceed available generators
        prob += numon[k, t] <= data['num'][k]

        # Startup generators are those which were not on previous period
        if t == 0:
            prob += numstart[k, t] == numon[k, t]
        else:
            prob += numstart[k, t] >= numon[k, t] - numon[k, t-1]

# Solving the problem
prob.solve()

# Extracting result
numon_output = [[int(numon[k, t].varValue) for t in range(T)] for k in range(K)]

output = {
    "numon": numon_output
}

print(output)
print(f' (Objective Value): <OBJ>{pulp.value(prob.objective)}</OBJ>')